'''
Created on Jul 12, 2024

@author: immanueltrummer
'''
import argparse
import openai
import re
import sqlite3

client = openai.OpenAI()


def extract_structure(dbpath):
    """ Extracts create-table statements from database.
    
    Args:
        dbpath: path to SQLite database.
    
    Returns:
        create-table statements from database.
    """
    with sqlite3.connect(dbpath) as connection:
        cursor = connection.cursor()
        cursor.execute(
            "select sql from sqlite_master where type='table'"
            )
        table_rows = cursor.fetchall()
        table_cells = [row[0] for row in table_rows]
        return '\n'.join(table_cells)
    

def create_prompt(db_structure, question):
    """ Creates a prompt for text-to-SQL translation.
    
    Args:
        db_structure: structure of database.
        question: question to translate.
    
    Returns:
        SQL query translating question.
    """
    parts = []
    parts.append('Database:')
    parts.append(db_structure)
    parts.append('Translate this question to SQL:')
    parts.append(question)
    return '\n'.join(parts)


def call_llm(prompt):
    """ Returns answer generated by the LLM.
    
    Args:
        prompt: prompt sent to LLM.
    
    Returns:
        answer generated by LLM.
    """
    messages = [{'role':'user', 'content':prompt}]
    reply = client.chat.completions.create(
        model='gpt-4o', messages=messages
        )
    return reply.choices[0].message.content


def process_query(dbpath, query):
    """ Processes query on SQLite database.
    
    Args:
        dbpath: path to SQLite database.
        query: SQL query to process.
    
    Returns:
            query result (as string).
    """
    with sqlite3.connect(dbpath) as connection:
        cursor = connection.cursor()
        cursor.execute(query)
        rows = cursor.fetchall()
        rows_str = [str(row) for row in rows]
        return '\n'.join(rows_str)


if __name__ == '__main__':
    
    parser = argparse.ArgumentParser()
    parser.add_argument('dbpath', type=str, help='Path to SQLite data')
    args = parser.parse_args()
    
    db_structure = extract_structure(args.dbpath)
    
    while True:
        
        question = input('Enter question:')
        
        if question == 'quit':
            break
    
        prompt = create_prompt(db_structure, question)
        print('--- PROMPT ---')
        print(prompt)
        
        raw_answer = call_llm(prompt)
        query = re.findall('```sql(.*)```', raw_answer, re.DOTALL)[0]
    
        print('--- QUERY ---')
        print(query)
    
        result = process_query(args.dbpath, query)
        print('--- RESULT ---')
        print(result)